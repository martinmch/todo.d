#!/usr/bin/env bash

alias grep="grep -oP -m1"
readonly GREEN="\e[32m"
readonly RED="\e[31m"
readonly YELLOW="\e[1;33m"
readonly RESET="\e[0m"
declare -A colors
colors["A"]="$RED"
colors["B"]="$YELLOW"
colors["C"]="$GREEN"
prog=$(basename $0)
taskdir="$HOME/todo/tasks"
tododir="$HOME/todo"
donedir="$HOME/todo/done"
deletedir="$HOME/todo/deleted"

# from https://gist.github.com/briantjacobs/7753bf850ca5e39be409
parse_yaml() {
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
    indent = length($1)/2;
    vname[indent] = $2;
    for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
            vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
            printf("local %s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, $3);
        }
    }' | sed 's/_=/+=/g'
}

print_file() {
    # parse_yaml <(sed -n '/---/, /---/{ /---/!p }' "$1")
    eval $(parse_yaml <(sed -n '/---/, /---/{ /---/!p }' "$1"))

    tagstr=$(for t in ${tags_[@]}; do printf '@%s ' "$t"; done; printf '\n')
    color=${colors[$pri]}

    # Don't print completed tasks
    [ ! -z "$completed" ] && return

    printf '%b' $color
    printf '%s ' "($pri)"
    printf '%s ' "$title"
    printf '%b%s%b\n' "$YELLOW" "$tagstr" "$RESET"
    ((processed = processed+1))
}

archive() {
    eval $(parse_yaml <(sed -n '/---/, /---/{ /---/!p }' "$1"))

    # Don't print completed tasks
    [ -z "$completed" ] && return

    echo "Archiving $(realpath --relative-to=. "$1")"
    mv "$1" ~/todo/done/
    ((processed = processed+1))
}


if [[ "$1" == "list" ]]
then
    tasks=0
    printed=0
    for f in ~/todo/todo/*;
    do
        print_file "$f"
        ((tasks = tasks+1))
    done
    
    echo '--'
    printf 'TODO: %s of %s tasks shown\n' $processed $tasks
    exit 0
fi
if [[ "$1" == "del" ]] || [[ "$" == "delete" ]]
then
    tasks=0
    processed=0
    listdir="$taskdir"/*
    for f in $listdir
    do
        [ ! -e ${f} ] && continue;
        ((tasks = tasks+1))
        if [[ " ${@:2} " =~ " $tasks " ]]
        then
            mv ${f} "$deletedir"/
            printf '%s deleted\n' ${f}
        else
            usage
        fi;
    done
    exit 0
fi
if [[ "$1" == "archive" ]]
then
    tasks=0
    processed=0
    for f in ~/todo/todo/*;
    do
        archive "$f"
        ((tasks = tasks+1))
    done
    
    echo '--'
    printf 'TODO: %s of %s tasks archived\n' $processed $tasks
    exit 0
fi


cat<<EOF
$prog - Handles todos

Commands:
    list - Lists all todos
    archive - Archives all completed todos
EOF
exit 1
